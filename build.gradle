buildscript {
    ext {
        springbootVersion = '2.1.7.RELEASE'
    }
    repositories { // 각종 의존성 (라이브러리)들을 어떤 원격 저장소에서 받을지 결정
        mavenCentral() // 기본
    }
    dependencies { // 프로젝트 개발에 필요한 의존성들을 선언
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}")
    }

}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 스프링 부트의 의존성을 관리해 주는 플러그인

//plugins {
//    id 'java'
//}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

// gradle 7버전에서는 compile, testComplie 대신 implementation, testImplementation 사용
dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.1") {
        exclude module:'junit-platform-commons'
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.1")
    testRuntimeOnly("org.junit.platform:junit-platform-engine:1.5.1")
    testRuntimeOnly("org.junit.platform:junit-platform-commons:1.5.1")

//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // 인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리해서 자동완성 기능이 가능
    // 특정 버전을 명시하지 않아야 맨위에 ${springBootVersion}의 버전을 따라가게 됨
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    // lombok 설치
    implementation('org.projectlombok:lombok')
    // 사용자 정의 annotaion 을 추가시 해당 부분은 compile 시점에 찾게 된다.
    // 그 이전에 annotaion processor 가 선수로 존재하기 때문에 이 두줄을 추가해야한다.
    annotationProcessor('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
    /* 스프링 부트용 Spring Data JPA 추상화 라이브러리
       스프링 부트 버전에 맞춰 다음으로 JPA 관련 라이브러리 버전 관리 */
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    /* 인메모리 관계형 데이터베이스
       별도의 설치 없이 프로젝트 의존성만으로 관리
       메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화 된다. */
    implementation('com.h2database:h2')
    // mustache 의존성
    implementation('org.springframework.boot:spring-boot-starter-mustache')
    /* spring-boot-starter-oauth2-client : 소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성
     * spring-security-oauth2-client 와 spring-security-oauth2-jose 를 기본으로 관리 */
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    // 세션 저장소로 데이터베이스 사용
    implementation('org.springframework.session:spring-session-jdbc')
    // 스프링 시큐리티 설정 때문에 인증되지 않은 사용자의 요청은 이동시키기 때문에 API 요청은 임의의 인증된 사용자를 추가하여 API 만 테스트해 볼 수 있도록 함
    testImplementation('org.springframework.security:spring-security-test')

}

test {
    useJUnitPlatform()
}